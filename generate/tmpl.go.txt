package {{.PackageName -}}_fuzzy_test

import (
	"testing"
	"github.com/google/gofuzz"
	"{{.CompletePackagePath -}}"
)

{{range .TestsToGenerate -}}
func {{.FunctionUnderTest}}FuzzyTest(t *testing.T) {
	fuzzer := fuzz.New()

	{{range .CompositePtrsToInit -}}
	{{.Name}} := &{{.Type}}{}
	fuzzer.Fuzz({{.Name}})
	{{end -}}

	{{range .CompositeAutosToInit}}
	{{.Name}} := {{.Type}}{}
	fuzzer.Fuzz(&{{.Name}})
	{{end -}}

	{{range .SimplePtrsToInit}}
	{{.Name}} := new({{.Type}})
	fuzzer.Fuzz({{.Name}})
	{{end -}}

	{{range .SimpleAutosToInit}}
	var {{.Name}} {{.Type}}
	fuzzer.Fuzz(&{{.Name}})
	{{end -}}

	{{if .ReceiverName.Type}}
		{{if .ReceiverIsPointer}}
			{{if .ReceiverIsComposite}}
				{{.ReceiverName.Name -}} := &{{.ReceiverName.Type}}{}
				fuzzer.Fuzz({{.ReceiverName.Name -}})
			{{else -}}
				{{.ReceiverName.Name}} := new({{.ReceiverName.Type}})
				fuzzer.Fuzz({{.ReceiverName.Name -}})
			{{end -}}
		{{else -}}
			{{if .ReceiverIsComposite -}}
				{{.ReceiverName.Name -}} := {{.ReceiverName.Type -}}{}
				fuzzer.Fuzz(&{{.ReceiverName.Name -}})
			{{else -}}
				var {{.ReceiverName.Name -}} {{.ReceiverName.Type -}}
				fuzzer.Fuzz(&{{.ReceiverName.Name -}})
			{{end -}}
		{{end -}}
	{{end -}}

	{{if .ReceiverName.Type }}
		{{.ReceiverName.Name}}.{{.FunctionUnderTest}}({{range .FunctionArgumentNamesInOrder}} {{. -}}, {{end}})
	{{else }}
		{{.FunctionUnderTest -}}({{range .FunctionArgumentNamesInOrder -}} {{. -}}, {{end -}})
	{{end}}

}
{{end}}
